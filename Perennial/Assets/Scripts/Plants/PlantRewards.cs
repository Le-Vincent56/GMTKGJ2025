using System.Collections.Generic;
using Perennial.Core.Debugging;
using Perennial.Garden;
using Perennial.Plants.Data;
using Perennial.Plants.Mutations;
using UnityEngine;
using LogType = Perennial.Core.Debugging.LogType;

namespace Perennial.Plants
{
    public class PlantRewards
    {
        private readonly Plant _owner;
        private const float BONUS_MODIFIER = 1.5f;
        private readonly Food _foodMultiplier;
        private readonly Food _foodConstant;
        
        public bool BonusActive { get; set; }
        public MutationSelectionResult LastMutationResult { get; private set; }

        public PlantRewards(Plant owner, int foodMultiplier, int foodConstant)
        {
            _owner = owner;
            BonusActive = false;
            _foodMultiplier = (Food)foodMultiplier;
            _foodConstant = (Food)foodConstant;
        }

        public (Food Food, Seeds Base, Seeds? Mutation) GetRewards()
        {
            return (CalculateFood(), CalculateSeeds(), CalculateMutation());
        }

        /// <summary>
        /// Calculate the amount of food to reward the player
        /// </summary>
        public Food CalculateFood()
        {
            Food baseAmount = (_foodMultiplier * _owner.Lifetime.CurrentLifetime) + _foodConstant;

            if(BonusActive) baseAmount *= BONUS_MODIFIER;
            
            // Apply food modifier from stats
            float foodModifier = _owner.Stats.FoodModifier;
            baseAmount += (Food)foodModifier;

            return baseAmount;
        }

        /// <summary>
        /// Calculate the amount of seeds generated of the plant being harvested
        /// </summary>
        public Seeds CalculateSeeds()
        {
            int seedsToReturn = Random.Range(
                _owner.Stats.SeedsMin, 
                _owner.Stats.SeedsMax
            );
            return new Seeds(_owner.Definition.ID, (StorageAmount)seedsToReturn);
        }

        /// <summary>
        /// Calculate the amount of seeds generated by a mutation
        /// </summary>
        public Seeds? CalculateMutation()
        {
            // Check if the chance to mutate has succeeded
            float random = Random.Range(0f, 1f);
            if (random > _owner.Stats.MutationChance) return null;
            
            // Get the garden manager from the owner
            GardenManager gardenManager = _owner.GardenManager;
            MutationSelector mutationSelector = MutationManager.Instance.Selector;

            // Exit if missing dependencies
            if (gardenManager == null || mutationSelector == null)
            {
                Debugger.Log("Cannot calculate mutation: Missing GardenManager or MutationSelector", 
                    LogType.Warning);
                return null;
            }
            
            // Calculate the mutation using the selector
            LastMutationResult = mutationSelector.SelectMutation(_owner, gardenManager);
            
            // Exit if no mutation was selected
            if (!LastMutationResult.SelectedMutation.HasValue) return null;
            
            // Get selected mutation candidate
            MutationCandidate selected = LastMutationResult.SelectedMutation.Value;
            
            // Log mutation selection for debugging
            Debugger.Log($"Mutation selected: {selected.ResultingPlant.Name} " +
                         $"({selected.PercentChance:F1}% chance) from {LastMutationResult.AllCandidates.Count} candidates",
                LogType.Info);
            
            // Create and return mutation with the plant ID and a drop rate depending on the plant's stats
            return new Seeds(selected.ResultingPlant.ID, (StorageAmount)(1f * _owner.Stats.MutationDropRate));
        }

        /// <summary>
        /// Get a list of all the Mutation Candidates
        /// </summary>
        public List<MutationCandidate> GetMutationCandidates()
        {
            return LastMutationResult.AllCandidates ?? new List<MutationCandidate>();
        }
    }
}
